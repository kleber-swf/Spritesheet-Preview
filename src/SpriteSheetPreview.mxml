<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:provider="com.pblabs.engine.resource.provider.*" width="972" height="520" minWidth="972" minHeight="520" applicationComplete="application_applicationComplete(event)"
					   backgroundColor="#5A5E67" creationComplete="application_creationComplete(event)" enterFrame="application_enterFrame(event)" frameRate="60" invoke="application_invoke(event)"
					   nativeDragDrop="application_nativeDragDrop(event)" nativeDragEnter="application_nativeDragEnter(event)" showStatusBar="false" title="SpriteSheet Preview"
					   preinitialize="application_preinitialize(event)" displayStateChanging="application_displayStateChanging(event)" closing="application_closing(event)">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace provider "com.pblabs.engine.resource.provider.*";
		
		.Tools {
			backgroundColor:#444444;
			borderColor:#333333;
			shadowColor: #323232;
			dropShadowVisible:true;
		}
	</fx:Style>

	<fx:Script>
		<![CDATA[
			import app.AnimationModel;
			import app.ResourceController;
			import app.SpriteSheet;
			import app.UpdateController;
			
			import gui.AboutFrame;
			import gui.SettingsFrame;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IUIComponent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.managers.DragManager;
			
			import settings.Settings;
			
			import spark.events.IndexChangeEvent;
			
			private static const WHEEL_PAGE_SIZE:int = 3;
			
			[Bindable]
			private var _model:AnimationModel;
			[Bindable]
			private var _updater:UpdateController;
			
			private var _resources:ResourceController;
			
			public static var _spriteSheet:SpriteSheet;
			private var _bitmapData:BitmapData;
			private var _drawBitmap:Bitmap;
			private var _buffer:BitmapData;
			private var _matrix:Matrix = new Matrix();
			private var _sizeBeforeMaximization:Rectangle;
			
			[Bindable]
			private var _scale:Number = 1;
			[Bindable]
			private var _minScale:Number = 0.5;
			[Bindable]
			private var _maxScale:Number = 3;
			[Bindable]
			private var _hasContent:Boolean;
			[Bindable]
			private var _frames:ArrayCollection;
			[Bindable]
			private var _showFrameBorder:Boolean;
			
			private var _lastTime:int = 0;
			private var _lastDirectory:String;
			
			
			/* ===== [INITIALIZATION] ===== */
			
			protected function application_preinitialize(event:FlexEvent):void {
				setupInitialOptions();
			}
			
			private function application_creationComplete(event:FlexEvent):void {
				// Check for updates
				if (!Settings.getBoolean(Settings.OPTION_CHECK_FOR_UPDATES, true))
					return;
				_updater = new UpdateController("http://tools.kleber-swf.com/spritesheetpreview/update.xml");
				_updater.checkForUpdate(function(event:ErrorEvent):void {Alert.show(event.toString());});
			}
			
			private function application_applicationComplete(event:FlexEvent):void {
				// Create instances
				_model = new AnimationModel();
				_resources = new ResourceController();
				_resources.onImageLoadSuccess = onImageLoadSuccess;
				_resources.onImageLoadError = onImageLoadError;
				
				_spriteSheet = new SpriteSheet(_model);
				createDrawBitmap();
				stageContainer.addChild(_drawBitmap);
				
				// install keyboard shortcuts
				stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp, false, int.MAX_VALUE);
				stage.addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheel, false, int.MAX_VALUE);
			}
			
			private function application_invoke(event:InvokeEvent):void {
				// Check initial parameters
				var arguments:Array = event.arguments;
				if (arguments != null && arguments.length > 0) {
					_resources.imageURL = arguments[0];
					if (arguments.length > 0) {
						var n:Number = parseInt(arguments[1]);
						if (!isNaN(n))
							_model.rows = n;
						if (arguments.length > 1) {
							n = parseInt(arguments[2]);
							if (!isNaN(n))
								_model.cols = n;
						}
						setupFrames();
					}
					return;
				}
				
				if (!Settings.getBoolean(Settings.OPTION_SAVE_LAST_FILE, false))
					return;
				var lastFile:String = Settings.getString(Settings.OPTION_LAST_FILE_URL, null);
				if (!lastFile)
					return;
				_resources.imageURL = lastFile;
				_model.rows = Settings.getInt(Settings.OPTION_LAST_FILE_ROWS, 1);
				_model.cols = Settings.getInt(Settings.OPTION_LAST_FILE_COLS, 1);
			}
			
			protected function application_displayStateChanging(event:NativeWindowDisplayStateEvent):void {
				if (event.afterDisplayState != NativeWindowDisplayState.MAXIMIZED)
					return;
				_sizeBeforeMaximization = new Rectangle(nativeWindow.x, nativeWindow.y, nativeWindow.width, nativeWindow.height);
			}
			
			protected function application_closing(event:Event):void {
				saveOptions();
			}
			
			/* ===== [EVENTS] ===== */
			
			private function stageContainer_resize(event:ResizeEvent):void {
				if (stageContainer == null || stageContainer.width == 0 || stageContainer.height == 0)
					return;
				var newWidth:int = stageContainer.width;
				var newHeight:int = stageContainer.height;
				createDrawBitmap();
				scale = _scale;
			}
			
			private function zoomSlider_change(event:Event):void {
				scale = (event.target as HSlider).value;
			}
			
			private function zoomLabel_change(event:Event):void {
				scale = valueChanged(event) * 0.01;
			}
			
			private function contentContainer_click(event:MouseEvent):void {
				event.target.setFocus();
			}
			
			private function application_enterFrame(event:Event):void {
				if (_bitmapData == null || _spriteSheet == null)
					return;
				
				var time:int = getTimer();
				var delta:int = time - _lastTime;
				_lastTime = time;
				
				_buffer.lock();
				_buffer.fillRect(_buffer.rect, 0x000000);
				_spriteSheet.draw(_buffer, delta, _buffer.rect);
				_buffer.unlock();
				
				_bitmapData.lock();
				_bitmapData.fillRect(_bitmapData.rect, 0x000000);
				if (_showFrameBorder)
					drawFrameBorder(_bitmapData);
				_bitmapData.draw(_buffer, _matrix);
				_bitmapData.unlock();
			}
			
			private function openButton_click(event:MouseEvent):void {
				if (!_lastDirectory)
					_lastDirectory = File.desktopDirectory.url;
				var file:File = new File(_lastDirectory);
				file.addEventListener(FileListEvent.SELECT_MULTIPLE, openFile);
				file.browseForOpenMultiple("Choose the sprites");
			}
			
			private function openFile(event:FileListEvent):void {
				_resources.imageURL = event.files[0].url;
			}
			
			// TODO this could be better...
			private function onKeyUp(event:KeyboardEvent):void {
				switch (event.keyCode) {
					case Keyboard.ENTER:
						if (!event.ctrlKey)
							return;
						togglePlay();
						event.stopPropagation();
						return;
					case Keyboard.L:
						toggleLoop();
						event.stopPropagation();
						return;
					case Keyboard.P:
						togglePingPong();
						event.stopPropagation();
						return;
				}
			}
			
			// TODO this could be better...
			private function onMouseWheel(event:MouseEvent):void {
				var focusedComponent:UIComponent = focusManager.getFocus() as UIComponent;
				if (!focusedComponent) {
					focusedComponent = stage.focus as UIComponent;
					if (!focusedComponent)
						return;
				}
				var focusedComponentID:String = focusedComponent.id;
				switch (focusedComponentID) {
					case "stageContainer":
						scale = _scale + (event.delta / WHEEL_PAGE_SIZE * zoomSlider.stepSize * 10);
						break;
				}
			}
			
			
			/* ===== [DRAG AND DROP] ===== */
			
			private function application_nativeDragEnter(event:NativeDragEvent):void {
				if (!event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
					return;
				var files:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
				// only allow a single file to be dragged in
				if (files.length == 1) {
					var r:IUIComponent = event.currentTarget as IUIComponent;
					DragManager.acceptDragDrop(r);
				} else
					DragManager.acceptDragDrop(this);
			}
			
			private function application_nativeDragDrop(event:NativeDragEvent):void {
				var arr:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
				_resources.imageURL = (arr[0] as File).url;
			}
			
			
			/* ===== [ANIMATION DATA CHANGING] ===== */
			
			private function rowsInput_change(event:Event):void {
				_model.rows = valueChanged(event);
				setupFrames();
			}
			
			private function colsInput_change(event:Event):void {
				_model.cols = valueChanged(event);
				setupFrames();
			}
			
			private function startFrameInput_change(event:Event):void {
				_model.startFrame = event.target.value - 1;
				setupFrames();
			}
			
			private function endFrameInput_change(event:Event):void {
				_model.endFrame = valueChanged(event, event.target.value - 1);
				setupFrames();
			}
			
			private function fpsInput_change(event:Event):void {
				_model.fps = valueChanged(event);
			}
			
			private function loopCheckbox_changed(event:Event):void {
				toggleLoop();
			}
			
			private function pingpongCheckbox_changed(event:Event):void {
				togglePingPong();
			}
			
			private function playButton_change(event:Event):void {
				togglePlay();
			}
			
			private function frameBorderCheckBox_click(event:MouseEvent):void {
				_showFrameBorder = frameBorderCheckBox.selected;
			}
			
			private function frameSlider_change(event:Event):void {
				_model.playing = false;
				_model.currentFrame = (event.target as HSlider).value - 1;
			}
			
			private function frameList_change(event:IndexChangeEvent):void {
				_model.currentFrame = event.target.selectedItem;
			}
			
			
			/* ===== [OPERATIONS] ===== */
			
			private function set scale(value:Number):void {
				_scale = Math.max(_minScale, Math.min(_maxScale, value));
				_matrix.identity();
				_matrix.scale(_scale, _scale);
				_buffer = new BitmapData(stageContainer.width / _scale, stageContainer.height / _scale, true, 0x000000);
			}
			
			private function valueChanged(event:Event, value:Number = -1):int {
				value = value < 0 ? event.target.value : value;
				value = Math.max(1, isNaN(value) ? 1 : value);
				event.target.value = value;
				return value;
			}
			
			private function togglePlay():void {
				_model.playing = !_model.playing;
			}
			
			private function toggleLoop():void {
				_model.loop = !_model.loop;
			}
			
			private function togglePingPong():void {
				_model.pingpong = !_model.pingpong;
				if (!_model.pingpong)
					_spriteSheet.resetPlayDirection();
			}
			
			private function createDrawBitmap():void {
				var data:BitmapData = new BitmapData(stageContainer.width, stageContainer.height, true, 0x000000);
				if (_drawBitmap == null)
					_drawBitmap = new Bitmap(data, "auto", true);
				else {
					data.copyPixels(_bitmapData, _bitmapData.rect, new Point());
					_drawBitmap.bitmapData.dispose();
					_drawBitmap.bitmapData = data;
				}
				_buffer = new BitmapData(data.width, data.height, true, 0x000000);
				_bitmapData = data;
			}
			
			private function onImageLoadError(errString:String):void {
				setupTitle();
				Alert.show(errString, "Error");
			}
			
			private function onImageLoadSuccess(image:Bitmap):void {
				_spriteSheet.image = image;
				_hasContent = true;
				_model.createFrameList();
				setupFrames();
				setupTitle();
				//				frameList.dataGroup.invalidateDisplayList();
				//				(frameList.dataProvider as ArrayCollection).refresh();
			}
			
			private function setupTitle():void {
				var url:String = _resources.imageURL;
				title = "SpriteSheet Preview" + (url ? (" - " + unescape(url.replace("file:///", "").replace(/\//g, File.separator))) : "");
			}
			
			private function setupFrames():void {
				_frames = new ArrayCollection(_model.frames);
				frameList.selectedItem = _model.currentFrame;
			}
			
			private function drawFrameBorder(buffer:BitmapData):void {
				var s:Sprite = new Sprite();
				s.graphics.clear();
				s.graphics.lineStyle(1, 0xFFFFFF - backgroundColorPicker.selectedColor, 0.9);
				s.graphics.drawRect(_spriteSheet.drawPosition.x * _scale - 1, _spriteSheet.drawPosition.y * _scale - 1, _spriteSheet.width * _scale + 2, _spriteSheet.height * _scale + 2);
				buffer.draw(s);
			}
			
			private function setupInitialOptions():void {
				Settings.open();
				if (!Settings.get(Settings.OPTION_SAVE_WINDOW_STATE, true))
					return;
				var displayState:String = Settings.get(Settings.WINDOW_STATE, nativeWindow.displayState);
				width = Math.max(minWidth, Settings.getInt(Settings.WINDOW_WIDTH, width));
				height = Math.max(minHeight, Settings.getInt(Settings.WINDOW_HEIGHT, height));
				nativeWindow.x = Settings.getInt(Settings.WINDOW_X, nativeWindow.x);
				nativeWindow.y = Settings.getInt(Settings.WINDOW_Y, nativeWindow.y);
				if (displayState == NativeWindowDisplayState.MAXIMIZED) {
					maximize();
					return;
				}
			}
			
			private function saveOptions():void {
				var displayState:String = nativeWindow.displayState;
				var x:int, y:int, w:int, h:int;
				if (displayState == NativeWindowDisplayState.MAXIMIZED && _sizeBeforeMaximization) {
					x = _sizeBeforeMaximization.x;
					y = _sizeBeforeMaximization.y;
					w = _sizeBeforeMaximization.width;
					h = _sizeBeforeMaximization.height;
				} else {
					x = nativeWindow.x;
					y = nativeWindow.y;
					w = width;
					h = height;
				}
				Settings.set(Settings.WINDOW_X, x);
				Settings.set(Settings.WINDOW_Y, y);
				Settings.set(Settings.WINDOW_WIDTH, w);
				Settings.set(Settings.WINDOW_HEIGHT, h);
				Settings.set(Settings.WINDOW_STATE, displayState == NativeWindowDisplayState.MINIMIZED ? NativeWindowDisplayState.NORMAL : displayState);
				if (Settings.getBoolean(Settings.OPTION_SAVE_LAST_FILE, false)) {
					Settings.set(Settings.OPTION_LAST_FILE_URL, _resources.imageURL);
					Settings.set(Settings.OPTION_LAST_FILE_ROWS, _model.rows);
					Settings.set(Settings.OPTION_LAST_FILE_COLS, _model.cols);
				} else {
					Settings.set(Settings.OPTION_LAST_FILE_URL, "");
					Settings.set(Settings.OPTION_LAST_FILE_ROWS, "");
					Settings.set(Settings.OPTION_LAST_FILE_COLS, "");
				}
				Settings.save();
			}
		]]>
	</fx:Script>
	<s:BorderContainer id="topBar" left="160" right="86" top="10" height="32" enabled="{_hasContent}" styleName="Tools">

		<s:CheckBox id="loopCheckbox" x="102" label="Loop" change="loopCheckbox_changed(event)" selected="{_model.loop}" toolTip="L" verticalCenter="0" />
		<s:CheckBox id="pingpongCheckbox" x="159" label="Ping Pong" change="pingpongCheckbox_changed(event)" selected="{_model.pingpong}" toolTip="P" verticalCenter="0" />
		<s:NumericStepper id="fpsInput" x="10" width="52" borderColor="#333333" borderVisible="true" change="fpsInput_change(event)" maximum="100" minimum="1" textAlign="right" value="{_model.fps}"
						  verticalCenter="0" />
		<s:Label x="67" text="fps" verticalCenter="0" />
		<mx:Button id="playButton" x="355" change="playButton_change(event)" downSkin="@Embed('../assets/images/play-down.png')" overSkin="@Embed('../assets/images/play-over.png')"
				   selected="{_model.playing}" selectedDownSkin="@Embed('../assets/images/pause-down.png')" selectedOverSkin="@Embed('../assets/images/pause-over.png')"
				   selectedUpSkin="@Embed('../assets/images/pause.png')" toggle="true" toolTip="Ctrl + Enter" upSkin="@Embed('../assets/images/play.png')" verticalCenter="0" />
		<s:HSlider id="frameSlider" left="381" right="10" change="frameSlider_change(event)" dataTipPrecision="0" liveDragging="true" maximum="{_model.endFrame+1}" minimum="{_model.startFrame+1}"
				   stepSize="1" value="{_model.currentFrame+1}" verticalCenter="0" />
	</s:BorderContainer>
	<s:BorderContainer id="contentContainer" left="160" right="207" top="50" bottom="50" borderVisible="false" click="contentContainer_click(event)" dropShadowVisible="false">
		<s:BitmapImage id="transparentBackground" left="0" right="0" top="0" bottom="0" fillMode="repeat" source="@Embed('../assets/images/transparency.png')" />
		<s:BorderContainer id="background" left="0" right="0" top="0" bottom="0" backgroundAlpha="{backgroundAlphaSlider.value}" backgroundColor="{backgroundColorPicker.selectedColor}" borderVisible="false" dropShadowVisible="false" />
		<s:BitmapImage id="dragAndDropImage" visible="{!_hasContent}" horizontalCenter="0" source="@Embed('../assets/images/drag-n-drop.png')" verticalCenter="0" />
		<mx:UIComponent id="stageContainer" left="0" right="0" top="0" bottom="0" resize="stageContainer_resize(event)" />
	</s:BorderContainer>

	<s:BorderContainer id="bottomBar" left="160" right="10" bottom="10" height="32" enabled="{_hasContent}" styleName="Tools">
		<s:HSlider id="zoomSlider" right="74" change="zoomSlider_change(event)" maximum="{_maxScale}" minimum="{_minScale}" showDataTip="false" stepSize="0.01" value="{_scale}" verticalCenter="0" />
		<s:NumericStepper id="zoomInput" right="10" width="52" borderColor="#333333" change="zoomLabel_change(event)" maximum="300" minimum="50" textAlign="right" value="{(zoomSlider.value*100)}" verticalCenter="0" />
		<s:Label x="10" text="Background" verticalCenter="0" />
		<mx:ColorPicker id="backgroundColorPicker" x="82" selectedColor="#5A5E67" showTextField="true" verticalCenter="0" />
		<s:HSlider id="backgroundAlphaSlider" x="112" width="60" maximum="1" minimum="0" showDataTip="false" stepSize="0.01" value="1" verticalCenter="0" />
		<s:CheckBox id="frameBorderCheckBox" left="194" label="Show frame border" click="frameBorderCheckBox_click(event)" selected="{_showFrameBorder}" verticalCenter="0" />
	</s:BorderContainer>
	<s:BorderContainer y="10" right="10" width="69" height="31" styleName="Tools">
		<s:Image id="aboutButton" right="7" width="26" height="26" click="AboutFrame.show(this, _updater.version)" source="@Embed('../assets/images/icons/question.png')" verticalCenter="0" />
		<s:Image id="settingsButton" left="6" width="26" height="26" click="SettingsFrame.show(this)" source="@Embed('../assets/images/icons/settings.png')" verticalCenter="0" />
	</s:BorderContainer>
	<s:BorderContainer left="10" top="10" bottom="10" width="142" styleName="Tools">
		<s:Panel left="0" right="0" top="92" height="124" backgroundColor="#444444" dropShadowVisible="false" enabled="{_hasContent}" styleName="Tools" title="Info">
			<s:Label x="9" y="19" text="Rows" />
			<s:Label x="9" y="49" text="Cols" />
			<s:NumericStepper id="rowsInput" y="13" right="10" width="61" borderColor="#333333" borderVisible="true" change="rowsInput_change(event)" maximum="1000" minimum="1" textAlign="right"
							  value="{_model.rows}" />
			<s:NumericStepper id="colsInput" y="41" right="10" width="61" borderColor="#333333" borderVisible="true" change="colsInput_change(event)" maximum="1000" minimum="1" textAlign="right"
							  value="{_model.cols}" />
		</s:Panel>
		<s:Panel y="215" left="0" right="0" height="119" dropShadowVisible="false" enabled="{_hasContent}" styleName="Tools" title="Frames">
			<s:Label x="9" y="20" text="Start" />
			<s:Label x="9" y="50" text="End" />
			<s:NumericStepper id="startFrameInput" x="67" y="14" right="10" width="61" borderColor="#333333" borderVisible="true" change="startFrameInput_change(event)" maximum="{_model.totalFrames}"
							  minimum="1" textAlign="right" value="{_model.startFrame+1}" />
			<s:NumericStepper id="endFrameInput" x="67" y="42" right="10" width="61" borderColor="#333333" borderVisible="true" change="endFrameInput_change(event)" maximum="{_model.totalFrames}"
							  minimum="{_model.startFrame+1}" textAlign="right" value="{_model.endFrame+1}" />
		</s:Panel>
		<s:Panel y="0" left="0" right="0" height="93" dropShadowVisible="false" styleName="Tools" title="File">
			<s:Button id="openButton" y="20" label="Open" click="openButton_click(event)" horizontalCenter="0" />
		</s:Panel>
	</s:BorderContainer>
	<s:BorderContainer right="10" top="50" bottom="50" width="189" styleName="Tools" enabled="{_hasContent}">
		<s:List id="frameList" left="0" right="0" top="0" bottom="0" borderVisible="false" change="frameList_change(event)" contentBackgroundAlpha="0.0" dataProvider="{_frames}"
				itemRenderer="view.renderer.FrameListItemRenderer" selectedItem="{_model.currentFrame}">
		</s:List>
	</s:BorderContainer>
</s:WindowedApplication>
